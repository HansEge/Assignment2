// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "advios_clkDivide.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic advios_clkDivide::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic advios_clkDivide::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> advios_clkDivide::ap_ST_fsm_state2 = "10";
const sc_lv<3> advios_clkDivide::ap_ST_fsm_state3 = "100";
const sc_lv<32> advios_clkDivide::ap_const_lv32_1 = "1";
const sc_lv<32> advios_clkDivide::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> advios_clkDivide::ap_const_lv32_2 = "10";
const sc_lv<1> advios_clkDivide::ap_const_lv1_1 = "1";
const sc_lv<1> advios_clkDivide::ap_const_lv1_0 = "0";
const sc_lv<32> advios_clkDivide::ap_const_lv32_5F5E0FF = "101111101011110000011111111";
const bool advios_clkDivide::ap_const_boolean_1 = true;

advios_clkDivide::advios_clkDivide(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_advios_clkCount_assi_fu_107_p2);
    sensitive << ( advios_clkCount_i );

    SC_METHOD(thread_advios_clkCount_o);
    sensitive << ( tmp_1_reg_120 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( advios_clkCount_assi_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_advios_clkCount_o_ap_vld);
    sensitive << ( tmp_1_reg_120 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_oneSecPulse);
    sensitive << ( tmp_1_fu_114_p2 );
    sensitive << ( tmp_1_reg_120 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_oneSecPulse_ap_vld);
    sensitive << ( tmp_1_fu_114_p2 );
    sensitive << ( tmp_1_reg_120 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_1_fu_114_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( advios_clkCount_assi_fu_107_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "advios_clkDivide_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, oneSecPulse, "(port)oneSecPulse");
    sc_trace(mVcdFile, oneSecPulse_ap_vld, "(port)oneSecPulse_ap_vld");
    sc_trace(mVcdFile, advios_clkCount_i, "(port)advios_clkCount_i");
    sc_trace(mVcdFile, advios_clkCount_o, "(port)advios_clkCount_o");
    sc_trace(mVcdFile, advios_clkCount_o_ap_vld, "(port)advios_clkCount_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_1_fu_114_p2, "tmp_1_fu_114_p2");
    sc_trace(mVcdFile, tmp_1_reg_120, "tmp_1_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, advios_clkCount_assi_fu_107_p2, "advios_clkCount_assi_fu_107_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

advios_clkDivide::~advios_clkDivide() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void advios_clkDivide::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_1_reg_120 = tmp_1_fu_114_p2.read();
    }
}

void advios_clkDivide::thread_advios_clkCount_assi_fu_107_p2() {
    advios_clkCount_assi_fu_107_p2 = (!advios_clkCount_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(advios_clkCount_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void advios_clkDivide::thread_advios_clkCount_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_120.read(), ap_const_lv1_1))) {
        advios_clkCount_o = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        advios_clkCount_o = advios_clkCount_assi_fu_107_p2.read();
    } else {
        advios_clkCount_o = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void advios_clkDivide::thread_advios_clkCount_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_120.read(), ap_const_lv1_1)))) {
        advios_clkCount_o_ap_vld = ap_const_logic_1;
    } else {
        advios_clkCount_o_ap_vld = ap_const_logic_0;
    }
}

void advios_clkDivide::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void advios_clkDivide::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void advios_clkDivide::thread_oneSecPulse() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_reg_120.read(), ap_const_lv1_1))) {
        oneSecPulse =  (sc_logic) (ap_const_lv1_1[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_1_fu_114_p2.read(), ap_const_lv1_0))) {
        oneSecPulse =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        oneSecPulse = sc_logic('X');
    }
}

void advios_clkDivide::thread_oneSecPulse_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_120.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_114_p2.read(), ap_const_lv1_0)))) {
        oneSecPulse_ap_vld = ap_const_logic_1;
    } else {
        oneSecPulse_ap_vld = ap_const_logic_0;
    }
}

void advios_clkDivide::thread_tmp_1_fu_114_p2() {
    tmp_1_fu_114_p2 = (!advios_clkCount_assi_fu_107_p2.read().is_01() || !ap_const_lv32_5F5E0FF.is_01())? sc_lv<1>(): (sc_bigint<32>(advios_clkCount_assi_fu_107_p2.read()) > sc_bigint<32>(ap_const_lv32_5F5E0FF));
}

void advios_clkDivide::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

